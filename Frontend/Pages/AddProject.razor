@page "/addproject"
@layout MainLayout
@using BusinessLogic.Entities
@using Newtonsoft.Json
@using System.Text
@using System.IdentityModel.Tokens.Jwt
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient

<h3>AddProject</h3>
<form>
    <div class="form-group">
        <label for="name">Project Name</label>
        <input type="text" class="form-control" id="name" @bind="project.Name" />
    </div>
    @if (isClient)
    {
        <div class="form-group">
            <label for="projectLeaderId">Project Leader</label>
            <select class="form-control" id="projectLeaderId" @bind="project.Projectleaderid">
                <option value="">Select Project Leader</option>
                @foreach (var projectLeader in projectLeaders)
                {
                    <option value="@projectLeader.Userid">
                        @projectLeader.Userid
                    </option>
                }
            </select>
        </div>
    }
    else
    {
        <div class="form-group">
            <label for="projectLeaderId">Project Leader</label>
            <input class="form-control" 
                   type="text"
                   id="projectLeaderId"
                   readonly
                   value="@loggedUser?.Userid"/>
        </div>
    }
    @if (!isClient)
    {
        <div class="form-group">
            <label for="clientId">Client</label>
            <select class="form-control" id="clientId" @bind="project.Clientid">
                <option value="">Select Client</option>
                @foreach (var client in clients)
                {
                    <option value="@client.Userid">
                        @client.Userid
                    </option>
                }
            </select>
        </div>
    }
    else
    {
        <div class="form-group">
            <label for="clientId">Client</label>
            <input class="form-control" 
                   type="text"
                   id="clientId"
                   readonly
                   value="@loggedUser?.Userid"/>
        </div>
    }
    <div class="form-group">
        <label for="priceHour">Price per Hour</label>
        <input type="text" class="form-control" id="priceHour" @bind="project.Pricehour" />
    </div>
    <button type="button" class="btn btn-primary" @onclick="CreateProject">Create Project</button>
</form>

@code {
    private Project project = new Project();
    private List<Freelancer> projectLeaders = new List<Freelancer>();
    private List<Client> clients = new List<Client>();
    private User loggedUser;
    private List<Guid> cIds;
    private Boolean isClient;
    
    
    protected override async Task OnInitializedAsync()
    {
        loggedUser = await LoadUserProfile();
        // Fetch project leaders and clients from the API
        projectLeaders = await GetFreelancersFromApi();
        clients = await GetClientsFromApi();

        cIds = clients.Select(c => c.Userid).ToList();

        isClient = cIds.Contains(loggedUser.Userid);
    }
    
    private async Task<User> LoadUserProfile()
    {
        var token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        if (!string.IsNullOrEmpty(token))
        {
    // Descodificar o token
            var jwtHandler = new JwtSecurityTokenHandler();
            var jwtToken = jwtHandler.ReadJwtToken(token);

    // Obter o ID do utilizador do token
            var userIdClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "userId");
            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out Guid userId))
            {
    // Fazer solicitação HTTP para obter o perfil do utilizador
                var response = await HttpClient.GetAsync($"http://localhost:5052/api/Users/{userId}");

                if (response.IsSuccessStatusCode)
                {
                    var userProfile = await response.Content.ReadFromJsonAsync<User>();
                    return userProfile;
                }
                else
                {
                    return new User();
                }
            }
            else
            {
                return new User();
            }
        }
        else
        {
            return new User();
        }
    }
    
    private async Task<List<Freelancer>> GetFreelancersFromApi()
    {
        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync("http://localhost:5052/api/Freelancers");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<List<Freelancer>>(content);
            }
            else
            {
                // Handle error response here if needed
                return new List<Freelancer>();
            }
        }
    }

    private async Task<List<Client>> GetClientsFromApi()
    {
        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync("http://localhost:5052/api/Clients");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<List<Client>>(content);
            }
            else
            {
                // Handle error response here if needed
                return new List<Client>();
            }
        }
    }

    private async Task CreateProject()
    {
        using (var httpClient = new HttpClient())
        {
            if (isClient)
            {
                project.Clientid = loggedUser?.Userid;
            }
            else
            {
                project.Projectleaderid = loggedUser?.Userid;
            }
            var json = JsonConvert.SerializeObject(project);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await httpClient.PostAsync("http://localhost:5052/api/Projects", content);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                // Handle error response here if needed
            }
        }
    }
}