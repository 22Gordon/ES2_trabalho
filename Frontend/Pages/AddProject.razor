@page "/addproject"
@layout MainLayout
@using Newtonsoft.Json
@using System.Text
@using BusinessLogic.Entities
@inject NavigationManager NavigationManager

<h3>AddProject</h3>
<form>
    <div class="form-group">
        <label for="name">Project Name</label>
        <input type="text" class="form-control" id="name" @bind="project.Name" />
    </div>
    <div class="form-group">
        <label for="projectLeaderId">Project Leader</label>
        <select class="form-control" id="projectLeaderId" @bind="project.Projectleaderid">
            <option value="">Select Project Leader</option>
            @foreach (var projectLeader in projectLeaders)
            {
                <option value="@projectLeader.Userid">
                    @projectLeader.Userid
                </option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="clientId">Client</label>
        <select class="form-control" id="clientId" @bind="project.Clientid">
            <option value="">Select Client</option>
            @foreach (var client in clients)
            {
                <option value="@client.Userid">
                    @client.Userid
                </option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="priceHour">Price per Hour</label>
        <input type="text" class="form-control" id="priceHour" @bind="project.Pricehour" />
    </div>
    <button type="button" class="btn btn-primary" @onclick="CreateProject">Create Project</button>
</form>

@code {
    private Project project = new Project();
    private List<Freelancer> projectLeaders = new List<Freelancer>();
    private List<Client> clients = new List<Client>();
    
    
    protected override async Task OnInitializedAsync()
    {
        // Fetch project leaders and clients from the API
        projectLeaders = await GetProjectLeadersFromApi();
        clients = await GetClientsFromApi();
    }
    
    private async Task<List<Freelancer>> GetProjectLeadersFromApi()
    {
        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync("http://localhost:5052/api/Freelancers");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<List<Freelancer>>(content);
            }
            else
            {
                // Handle error response here if needed
                return new List<Freelancer>();
            }
        }
    }

    private async Task<List<Client>> GetClientsFromApi()
    {
        using (var httpClient = new HttpClient())
        {
            var response = await httpClient.GetAsync("http://localhost:5052/api/Clients");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<List<Client>>(content);
            }
            else
            {
                // Handle error response here if needed
                return new List<Client>();
            }
        }
    }

    private async Task CreateProject()
    {
        using (var httpClient = new HttpClient())
        {
            var json = JsonConvert.SerializeObject(project);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await httpClient.PostAsync("http://localhost:5052/api/Projects", content);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                // Handle error response here if needed
            }
        }
    }
}