@page "/home"
@layout MainLayout
@using Newtonsoft.Json
@using BusinessLogic.Entities
@using System.IdentityModel.Tokens.Jwt
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient

<PageTitle>Index</PageTitle>

<h2>Hello, @loggedUser?.Displayname!</h2> <!-- Line 12 -->

<p>This is your main page.</p>
<a href="/addproject">ABCD</a>

<h3>Projects</h3>

@if (projects != null)
{
    <table>
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Preço</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var project in projects)
        {
            <tr>
                <td>@project.Projectid</td>
                <td>@project.Name</td>
                <td>@project.Pricehour</td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>No projects found.</p>
}

@code {
    private List<Project> projects;
    private User loggedUser;

    protected override async Task OnInitializedAsync()
    {
        loggedUser = await LoadUserProfile();
        projects = await GetProjectsFromApi();
    }
    
    private async Task<User> LoadUserProfile()
    {
        var token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        if (!string.IsNullOrEmpty(token))
        {
            // Descodificar o token
            var jwtHandler = new JwtSecurityTokenHandler();
            var jwtToken = jwtHandler.ReadJwtToken(token);

            // Obter o ID do utilizador do token
            var userIdClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "userId");
            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out Guid userId))
            {
                // Fazer solicitação HTTP para obter o perfil do utilizador
                var response = await HttpClient.GetAsync($"http://localhost:5052/api/Users/{userId}");

                if (response.IsSuccessStatusCode)
                {
                    var userProfile = await response.Content.ReadFromJsonAsync<User>();
                    return userProfile;
                }
                else
                {
                    return new User();
                }
            }
            else
            {
                return new User();
            }
        }
        else
        {
            return new User();
        }
    }
    
    private async Task SendMessageToConsole(string message)
    {
        await JsRuntime.InvokeVoidAsync("console.log", message);
    }

    private async Task<List<Project>> GetProjectsFromApi()
    {
        using (var httpClient = new HttpClient())
        {
            var aux = loggedUser.Userid;
            await SendMessageToConsole("inside function: " + aux.ToString());
            var response = await httpClient.GetAsync($"http://localhost:5052/api/Projects/user/{aux}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                try
                {
                    return JsonConvert.DeserializeObject<List<Project>>(content);
                }
                catch (JsonException)
                {
                    // Handle JSON parsing error
                    // You can display an error message or log the error
                }
            }
            else
            {
                // Handle non-success status code
                // You can display an error message or log the error
            }

            return new List<Project>();
        }
    }
}