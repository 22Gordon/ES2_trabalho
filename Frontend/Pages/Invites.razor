@page "/invites"
@layout MainLayout
@using BusinessLogic.Models
@using Newtonsoft.Json
@using System.IdentityModel.Tokens.Jwt
@using System.Text
@inject IJSRuntime JsRuntime

<h3>Invites</h3>

@if (inviteViewModels != null && inviteViewModels.Any())
{
    <table>
        <thead>
            <tr>
                <th>Projeto</th>
                <th>Status</th>
                <th>Aceitar Convite</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var inviteViewModel in inviteViewModels)
            {
                <tr>
                    <td>@inviteViewModel.ProjectName</td>
                    <td>@(inviteViewModel.IsAccepted ? "Aceite" : "NÃ£o Aceite")</td>
                    <td>
                        @if (!inviteViewModel.IsAccepted)
                        {
                            <button @onclick="() => AcceptInvite(inviteViewModel)">Aceitar</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No invites found.</p>
}

@code {
    private List<InviteViewModel> inviteViewModels;

    protected override async Task OnInitializedAsync()
    {
        inviteViewModels = await GetInvitesFromApi();
    }

    private async Task<List<InviteViewModel>> GetInvitesFromApi()
    {
        var userId = await LoadUserProfile();

        if (userId != Guid.Empty)
        {
            using (var httpClient = new HttpClient())
            {
                var response = await httpClient.GetAsync($"http://localhost:5052/api/Invite/user/{userId}");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    try
                    {
                        return JsonConvert.DeserializeObject<List<InviteViewModel>>(content);
                    }
                    catch (JsonException)
                    {
                        // Handle JSON parsing error
                        // You can display an error message or log the error
                    }
                }
                else
                {
                    // Handle non-success status code
                    // You can display an error message or log the error
                }
            }
        }

        return new List<InviteViewModel>();
    }

    private async Task<Guid> LoadUserProfile()
    {
        var token = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        if (!string.IsNullOrEmpty(token))
        {
            var jwtHandler = new JwtSecurityTokenHandler();
            var jwtToken = jwtHandler.ReadJwtToken(token);
            var userIdClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "userId");
            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out Guid userId))
            {
                return userId;
            }
        }

        return Guid.Empty;
    }

    private async Task AcceptInvite(InviteViewModel inviteViewModel)
    {
        var userId = await LoadUserProfile();

        if (userId != Guid.Empty)
        {
            using (var httpClient = new HttpClient())
            {
                var acceptInviteModel = new AcceptInviteModel
                {
                    UserId = userId,
                    ProjectTitle = inviteViewModel.ProjectName
                };

                var json = JsonConvert.SerializeObject(acceptInviteModel);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync("http://localhost:5052/api/Invite/accept", content);
                if (response.IsSuccessStatusCode)
                {
                    // Invitation accepted successfully
                    // You can perform any necessary actions or show a success message
                }
                else
                {
                    // Handle non-success status code
                    // You can display an error message or log the error
                }

                // Refresh the invites list
                inviteViewModels = await GetInvitesFromApi();
            }
        }
    }
}
