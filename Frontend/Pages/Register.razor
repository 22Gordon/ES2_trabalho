@page "/register"
@using Microsoft.AspNetCore.Components
@using BusinessLogic.Entities
@using BusinessLogic.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h3>Register</h3>

    <div class="form-group">
        <label for="displayname">Name:</label>
        <input id="displayname" type="text" class="form-control" @bind="@DisplayName" />
    </div>

    <div class="form-group">
        <label for="username">Username:</label>
        <input id="username" type="text" class="form-control" @bind="@Username" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <input id="password" type="password" class="form-control" @bind="@Password" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password:</label>
        <input id="confirmPassword" type="password" class="form-control" @bind="@ConfirmPassword" />
    </div>

    <div class="form-group">
        <label for="accountType">Account Type:</label>
        <select id="accountType" class="form-control" @bind="@AccountType">
            <option value="client">Client</option>
            <option value="freelancer">Freelancer</option>
        </select>
    </div>

    <button class="btn btn-primary" @onclick="HandleRegister">Register</button>

<p>Already have an account? <NavLink href="/login">Login</NavLink></p>

<!-- Exibição dos valores das variáveis -->
<p>DisplayName: @DisplayName</p>
<p>Username: @Username</p>
<p>Password: @Password</p>
<p>ConfirmPassword: @ConfirmPassword</p>
<p>AccountType: @AccountType</p>



@code {
    private string DisplayName { get; set; }
    private string Username { get; set; }
    private string Password { get; set; }
    private string ConfirmPassword { get; set; }
    private string AccountType { get; set; }

    private async Task HandleRegister()
    {
        // Validar os campos e realizar a lógica de registro
        if (Password != ConfirmPassword)
        {
            // Exibir mensagem de erro de senhas diferentes
            return;
        }
        //Criar objeto User com os dados do formulário
        var user = new UserRegistrationModel()
        {
            DisplayName = DisplayName,
            Username = Username,
            Password = Password
        };

        // Lógica de registo e criação do usuário

        switch (AccountType)
        {
            case "client":
            // Criar conta de cliente
                var response1 = await HttpClient.PostAsJsonAsync("http://localhost:5052/api/Clients/Register", user);
                if (response1.IsSuccessStatusCode)
                    NavigationManager.NavigateTo("/login");
                {
                    
                      }
                break;
            case "freelancer":
            // Criar conta de freelancer
                //Fazer solicitação HTTP para registar utilizador
                var response = await HttpClient.PostAsJsonAsync("http://localhost:5052/api/Freelancers/Register", user);
                if (response.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo("/login");
                }
                else
                {
                }
                break;
        }

        // Redirecionar para a página de login após o registo
       // NavigationManager.NavigateTo("/login");
    }
}
